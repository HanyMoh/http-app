{"version":3,"file":"globalhandlers.js","sourceRoot":"","sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionTypeValue,\n  isPrimitive,\n  isString,\n  keysToEventMessage,\n  logger,\n  normalize,\n  normalizeToSize,\n  truncate,\n} from '@sentry/utils';\n\nimport { shouldIgnoreOnError } from '../helpers';\nimport { eventFromStacktrace } from '../parsers';\nimport {\n  _installGlobalHandler,\n  _installGlobalUnhandledRejectionHandler,\n  _subscribe,\n  StackTrace as TraceKitStackTrace,\n} from '../tracekit';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    _subscribe((stack: TraceKitStackTrace, _: boolean, error: any) => {\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n      if (shouldIgnoreOnError() || isFailedOwnDelivery) {\n        return;\n      }\n      const self = getCurrentHub().getIntegration(GlobalHandlers);\n      if (self) {\n        getCurrentHub().captureEvent(self._eventFromGlobalHandler(stack, error), {\n          data: { stack },\n          originalException: error,\n        });\n      }\n    });\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      _installGlobalHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      _installGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace.\n   *\n   * @param stacktrace TraceKitStackTrace to be converted to an Event.\n   */\n  private _eventFromGlobalHandler(stacktrace: TraceKitStackTrace, error: any): Event {\n    if (!isString(stacktrace.message) && stacktrace.mechanism !== 'onunhandledrejection') {\n      // There are cases where stacktrace.message is an Event object\n      // https://github.com/getsentry/sentry-javascript/issues/1949\n      // In this specific case we try to extract stacktrace.message.error.message\n      const message = (stacktrace.message as unknown) as any;\n      stacktrace.message =\n        message.error && isString(message.error.message) ? message.error.message : 'No error message';\n    }\n\n    if (stacktrace.mechanism === 'onunhandledrejection' && (stacktrace.incomplete || stacktrace.mode === 'failed')) {\n      return this._eventFromIncompleteRejection(stacktrace, error);\n    }\n\n    const event = eventFromStacktrace(stacktrace);\n\n    const data: { [key: string]: string } = {\n      mode: stacktrace.mode,\n    };\n\n    if (stacktrace.message) {\n      data.message = stacktrace.message;\n    }\n\n    if (stacktrace.name) {\n      data.name = stacktrace.name;\n    }\n\n    const client = getCurrentHub().getClient();\n    const maxValueLength = (client && client.getOptions().maxValueLength) || 250;\n\n    const fallbackValue = stacktrace.original\n      ? truncate(JSON.stringify(normalize(stacktrace.original)), maxValueLength)\n      : '';\n    const fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledRejection' : 'Error';\n\n    // This makes sure we have type/value in every exception\n    addExceptionTypeValue(event, fallbackValue, fallbackType, {\n      data,\n      handled: false,\n      type: stacktrace.mechanism,\n    });\n\n    return event;\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   *\n   * @param stacktrace TraceKitStackTrace to be converted to an Event.\n   */\n  private _eventFromIncompleteRejection(stacktrace: TraceKitStackTrace, error: any): Event {\n    const event: Event = {\n      level: Severity.Error,\n    };\n\n    if (isPrimitive(error)) {\n      event.exception = {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      };\n    } else {\n      event.exception = {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with keys: ${keysToEventMessage(Object.keys(error).sort())}`,\n          },\n        ],\n      };\n      event.extra = {\n        __serialized__: normalizeToSize(error),\n      };\n    }\n\n    if (event.exception.values && event.exception.values[0]) {\n      event.exception.values[0].mechanism = {\n        data: {\n          mode: stacktrace.mode,\n          ...(stacktrace.incomplete && { incomplete: stacktrace.incomplete }),\n          ...(stacktrace.message && { message: stacktrace.message }),\n          ...(stacktrace.name && { name: stacktrace.name }),\n        },\n        handled: false,\n        type: stacktrace.mechanism,\n      };\n    }\n\n    return event;\n  }\n}\n"]}